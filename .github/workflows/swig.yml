###### DESCRIPTION
#
#
# This workflow builds and cache Swig binaries for the following platform:
# -- Macos-13 (x86)
# -- Macos-14 (arm)
# -- Windows-2022 (x86)
# -- Ubuntu-22.04 (x86)
# -- Ubuntu-22.04 (arm)
#
# This workflow requires 1 inputs for the target swig build os (to be specified with the `with` key)
# This workflow is triggers only on workflow_call event (form another action)
#
# The swig repository and branch are defined in environment variables SWIG_BRANCH and SWIG_REPOSITORY
# The SWIG_BRANCH value is used to tag the cached binary.
# The result binary cache key is of the form : swig-$SWIG_BRANCH-$runner.os-$runner.arch
# The result binary is uploaded as artifact to be used by other workflows, the name of the artifact follows :
# "swig_install_$runner.os_$runner.arch"
#
# The uploaded artifacts contains is structured as follow:
#
# For linux and mac :
#
# swig_install_$runner.os_$runner.arch (archive root)
# ├── bin
# │   ├── ccache-swig
# │   └── swig
# └── share
#     └── swig
#
# For windows :
# swig_install_Windows_X64 (archive root)
# ├── Lib
# └── swig.exe
#

name: Swig 

on:
  push:
    branches: [dev,main]
  workflow_call:
   inputs:
    os:
      description: 'The operating system to build swig for'
      required: true
      type: string
      default: all

env:
  SWIG_BRANCH: aggregated_release
  SWIG_REPOSITORY: https://github.com/christophe-calmejane/swig.git

jobs:
  swig-linux:
    if: inputs.os == 'linux' || inputs.os == 'all'
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-22.04","ubuntu-22.04-arm"]
    runs-on: ${{matrix.os}}
    steps:
    # Job inspired by https://github.com/christophe-calmejane/swig/blob/aggregated_release/.github/workflows/linux.yml
    - name: Cache Swig install
      id: cache-swig
      uses: actions/cache@v4
      with:
        path: swig_install
        key: swig-${{env.SWIG_BRANCH}}-${{runner.os}}-${{runner.arch}}

    - name: Pull swig repository
      if: steps.cache-swig.outputs.cache-hit != 'true'
      run: |
        git clone -b ${{env.SWIG_BRANCH}} ${{env.SWIG_REPOSITORY}} --single-branch
    
    - name: Install dependencies
      if: steps.cache-swig.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get -qq install libboost-dev libpcre3-dev
        CC="gcc"
        CXX="g++"
        export CC CXX

        echo CC="$CC" >> $GITHUB_ENV
        echo CXX="$CXX" >> $GITHUB_ENV

        ls -la $(which $CC) $(which $CXX)
        $CC --version
        $CXX --version
    - name: Configure
      working-directory: ./swig
      if: steps.cache-swig.outputs.cache-hit != 'true'
      run: |
        ./autogen.sh
        mkdir ../swig_install
        ./configure --prefix=${{github.workspace}}/swig_install
        
    - name: Build
      working-directory: ./swig
      if: steps.cache-swig.outputs.cache-hit != 'true'
      run: |
        make
        make install
        swig -version && ccache-swig -V

    - name: Upload Swig binaries
      uses: actions/upload-artifact@v4
      with:
        name: swig_install_${{runner.os}}_${{runner.arch}}
        path: swig_install

  swig-mac:
    if: inputs.os == 'macos' || inputs.os == 'all'
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-13","macos-14"]

    runs-on: ${{matrix.os}}
    steps:
   
    - name: Cache Swig install
      id: cache-swig
      uses: actions/cache@v4
      with:
        path: swig_install
        key: swig-${{env.SWIG_BRANCH}}-${{runner.os}}-${{runner.arch}}

    - name: Install job dependencies
      if: steps.cache-swig.outputs.cache-hit != 'true'
      run : |
        brew install ninja
        brew install wget
        brew install bash
        brew install grep
        brew install autoconf
        brew install automake
        brew install bison
        brew install readline
        echo "$(brew --prefix grep)/libexec/gnubin" >> $GITHUB_PATH

        # On mac intel (i.e. macos-13) brew install bison in /usr/local/opt/ while on Mx macos it goes to /opt/homebrew/opt

        if [[ ${{matrix.os}} == "macos-14" ]]; then
          bison_path="/opt/homebrew/opt/bison/bin"
        else
          bison_path="/usr/local/opt/bison/bin"
        fi
        echo $bison_path >> $GITHUB_PATH
        export LDFLAGS="-L$bison_path"


    - name: Pull swig repository
      if: steps.cache-swig.outputs.cache-hit != 'true'
      run: |
        git clone -b ${{env.SWIG_BRANCH}} ${{env.SWIG_REPOSITORY}} --single-branch

    - name: Install swig
      if: steps.cache-swig.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ./swig
      run: |
        which bison
        chmod +x autogen.sh
        ./autogen.sh
        mkdir ../swig_install
        ./configure --prefix="${{ github.workspace }}/swig_install"
        make
        make install

    - name: Upload Swig binaries
      uses: actions/upload-artifact@v4
      with:
        name: swig_install_${{runner.os}}_${{runner.arch}}
        path: swig_install

  swig-windows:
    if: inputs.os == 'windows' || inputs.os == 'all'

    runs-on: windows-2019 
    env:
      LC_ALL: en_US.UTF-8
    steps:
      # job inspired by https://github.com/christophe-calmejane/swig/blob/aggregated_release/.github/workflows/windows-cmake.yml 
      - name: Cache Swig install
        id: cache-swig
        uses: actions/cache@v4
        with:
          path: swig/install2
          key: swig-${{env.SWIG_BRANCH}}-${{runner.os}}-${{runner.arch}}

      - name: Install job dependencies
        if: steps.cache-swig.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          nuget install PCRE2 -OutputDirectory ${{github.workspace}}\tools
          nuget install Bison -OutputDirectory ${{github.workspace}}\tools

      # https://cygwin.com/cygwin-ug-net/cygpath.html
      - name: Prepare Environment
        if: steps.cache-swig.outputs.cache-hit != 'true'
        shell: bash
        run: |
          github_workspace=$(pwd)
          cat << EOF >> $GITHUB_ENV
          PCRE2_PATH=$(cygpath -w "$(ls -d $github_workspace/tools/PCRE2*)")
          EOF
          BISON_PATH=$(cygpath -w "$(ls -d $github_workspace/tools/Bison*)/bin")
          echo "$BISON_PATH" >> $GITHUB_PATH

      - name: Pull swig repository
        if: steps.cache-swig.outputs.cache-hit != 'true'
        run: |
          git clone -b ${{env.SWIG_BRANCH}} ${{env.SWIG_REPOSITORY}} --single-branch

      - name: Configure
        if: steps.cache-swig.outputs.cache-hit != 'true'
        shell: powershell
        working-directory: ./swig
        run: |
            cmake --version
            cmake -G "Visual Studio 16 2019" -A x64 `
            -DCMAKE_INSTALL_PREFIX="${{github.workspace}}\swig\install2" `
            -DCMAKE_C_FLAGS="/W3 /EHsc /DPCRE2_STATIC" `
            -DCMAKE_CXX_FLAGS="/W3 /EHsc /DPCRE2_STATIC" `
            -DPCRE2_INCLUDE_DIR="$env:PCRE2_PATH\include" `
            -DPCRE2_LIBRARY="$env:PCRE2_PATH\lib\pcre2-8-static.lib" `
            -DLINK_FLAGS="/NODEFAULTLIB:MSVCRT" -S . -B build

      - name: Build swig
        if: steps.cache-swig.outputs.cache-hit != 'true'
        shell: powershell
        working-directory: ./swig
        run: |
          cmake --build build --config Release
          cmake --install build --config Release

      - name: Check swig install
        if: steps.cache-swig.outputs.cache-hit != 'true'
        shell: powershell
        working-directory: ./swig/install2/bin
        run: |
          swig.exe -version
          swig.exe -help

      - name: Upload Swig binaries
        uses: actions/upload-artifact@v4
        with:
          name: swig_install_${{runner.os}}_${{runner.arch}}
          path: ./swig/install2
